plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // https://github.com/qoomon/gradle-git-versioning-plugin
    id 'me.qoomon.git-versioning' version '5.1.1'
    // https://siouan.github.io/frontend-gradle-plugin/
    id 'org.siouan.frontend-jdk11' version '6.0.0'
}

version = '0.0.1-SNAPSHOT'
group = 'me.itzg'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

frontend {
    nodeVersion = '16.15.0'
    nodeInstallDirectory = file("${buildDir}/node")
    packageJsonDirectory = file("${projectDir}/src/main/ui")

    assembleScript = 'run build'
}

var copyOverReactBuild = tasks.register('copyOverReactBuild', Copy) {
    dependsOn 'assembleFrontend'
    from(file('src/main/ui/build'))
    into(file("${buildDir}/resources/main/static"))
}

tasks.named('bootJarMainClassName') {
    dependsOn copyOverReactBuild
}
tasks.named('bootJar') {
    dependsOn copyOverReactBuild
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    def containerRegistry = System.getenv("CONTAINER_REGISTRY") ?: "ghcr.io"
    def containerImageName = System.getenv("CONTAINER_IMAGE_NAME") ?: "zenengeo/${project.name}"

    imageName = "${containerRegistry}/${containerImageName}:${project.version}"
    tags = ["${containerRegistry}/${containerImageName}:latest"]
    docker {
        publishRegistry {
            username = System.getenv("CONTAINER_REGISTRY_USER") ?: ""
            password = System.getenv("CONTAINER_REGISTRY_PASSWORD") ?: ""
            url = "https://${containerRegistry}"
        }
    }
}

